name: CI

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
  workflow_dispatch:
    inputs:

jobs:
  build-and-test:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9]
        architecture: [x86, x64]
        exclude:
        - os: ubuntu-latest
        - os: macos-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      id: setup-python
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install poetry
      run: |
        python -m pip install --upgrade pip
        pip install pipx
        pipx install poetry
    - name: Get poetry cache dir
      id: poetry-cache
      run: |
        echo "::set-output name=dir::$(poetry config cache-dir)"
    - name: Restore cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.poetry-cache.outputs.dir }}
        key: ${{ runner.os }}-poetry-py${{ steps.setup-python.outputs.python-version }}-${{ matrix.architecture }}-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-py${{ steps.setup-python.outputs.python-version }}-${{ matrix.architecture }}-
    - name: Install dependencies
      run: |
        poetry install
    - name: Test with pytest
      run: |
        poetry run pytest -n auto --dist loadscope --junit-xml=junit/test-results.xml --cov --cov-report=xml --cov-report=html
    - name: Update Codecov coverage report
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: ${{ matrix.os }}-py${{ matrix.python-version }}
